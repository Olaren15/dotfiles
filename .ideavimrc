" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

" Inspired by : https://www.cyberwizard.io/posts/the-ultimate-ideavim-setup/

let mapleader = " "
nnoremap <SPACE> <Nop>
set notimeout

" Search
set nohlsearch
set incsearch
set ignorecase
set smartcase

" line numbers / scrolling
set number
set relativenumber
set scrolloff=10

" Others
set showmode
set showcmd

" Don't use Ex mode, use Q for formatting.
map Q gq

" IntelliJ integrations
set idearefactormode=visual
set ideajoin
set nerdtree
set which-key " Requires the which-key intellij plugin

" plugins
Plug 'tpope/vim-surround'
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-commentary'
Plug 'vim-scripts/argtextobj.vim'

" cool remaps
map <leader>b <Action>(ToggleLineBreakpoint)

" Refactors
let g:WhichKeyDesc_reformat_code = "<leader>rf Reformat code"
if &ide =~? 'JetBrains Rider'
    map <leader>rf <Action>(SilentCodeCleanup)
else
    map <leader>rf <Action>(ReformatCode)
endif
let g:WhichKeyDesc_rename = "<leader>rn Re[n]ame"
map <leader>rn <Action>(RenameElement)
let g:WhichKeyDesc_extract_methoe = "<leader>rm Extract [m]ethod"
map <leader>rm <Action>(ExtractMethod)
let g:WhichKeyDesc_show_refactor_options = "<leader>rr [r]efactor actions"
map <leader>rr <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_code_actions = "<leader>ca [c]ode [a]ctions"
map <leader>ca <Action>(ShowIntentionActions)

" Code navigation
let g:WhichKeyDesc_forward = "<leader>f [f]orward"
map <leader>f <Action>(Forward)
let g:WhichKeyDesc_back = "<leader>b [b]ack"
map <leader>b <Action>(Back)

" Tab navigation
let g:WhichKeyDesc_next_tab = "<A-n> [n]ext tab"
nnoremap <A-n> :tabnext<CR>
let g:WhichKeyDesc_previous_tab = "<A-p> [p]revious tab"
nnoremap <A-p> :tabprev<CR>\
let g:WhichKeyDesc_close_tab = "<A-q> [q]uit tab"
map <A-q> <Action>(CloseContent)
" Tab Shifter keybinds (requires the Tab Shifter plugin)
map <S-A-h> <Action>(TabShiftActions.ShiftLeft)
map <S-A-j> <Action>(TabShiftActions.ShiftDown)
map <S-A-k> <Action>(TabShiftActions.ShiftUp)
map <S-A-l> <Action>(TabShiftActions.ShiftRight)

" Commentary config
let g:WhichKeyDesc_commentary = "gc [c]omment"
nmap gc <Plug>Commentary
let g:WhichKeyDesc_comment_line = "<leader>cc [c]omment line"
nmap gcc <Plug>CommentaryLine

" Nerdtree
let g:WhichKeyDesc_focus_explorer = "<leader>e Focus [e]xplorer"
map <leader>e :NERDTreeFocus<CR>

" Faster access to system clipboard
nnoremap <leader>y "+y
let g:WhichKeyDesc_clipboard_yank = "<leader>y [y]ank to system clipboard"
nnoremap <leader>p "+p
let g:WhichKeyDesc_clipboard_paste = "<leader>p [p]aste from system clipboard"

" Pane navigation
nnoremap <A-h> <C-w>h
let g:WhichKeyDesc_window_left = "<A-h> Move focus left"
nnoremap <A-l> <C-w>l
let g:WhichKeyDesc_window_right = "<A-l> Move focus right"
nnoremap <A-k> <C-w>k
let g:WhichKeyDesc_window_up = "<A-k> Move focus up"
nnoremap <A-j> <C-w>j
let g:WhichKeyDesc_window_down = "<A-j> Move focus down"

" ide completion
map <C-n> <Action>(HippieCompletion)
let g:WhichKeyDesc_next_completion = "<C-n> [n]ext completion option"
map <C-p> <Action>(HippieBackwardCompletion)
let g:WhichKeyDesc_previous_completion = "<C-p> [p]revious completion option"
imap <C-y> <Action>(EditorChooseLookupItem)
let g:WhichKeyDesc_accept_completion = "<C-y> [y]es (accept) completion"
